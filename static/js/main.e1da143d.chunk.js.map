{"version":3,"sources":["components/SearchBar.js","components/ArtistDetails.js","components/SearchResults.js","components/ArtistEvents.js","components/EventResults.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","alignItems","width","paper","iconButton","padding","textField","margin","spacing","input","outlineColor","color","borderColor","grid","SearchBar","props","history","useHistory","classes","useState","searchTerm","setSearchTerm","userInput","setUserInput","search","e","preventDefault","length","push","Grid","container","direction","className","item","xs","FormControl","variant","Paper","elevation","OutlinedInput","focused","id","type","placeholder","value","required","onChange","target","replace","handleChange","onKeyPress","key","handleKeyPress","endAdornment","InputAdornment","position","IconButton","aria-label","onClick","aria-autocomplete","onMouseDown","event","edge","textAlign","cursor","avatar","backgroundColor","red","text","fontSize","ArtistDetails","Card","CardHeader","Avatar","src","results","image_url","title","name","subheader","Typography","noWrap","facebook_page_url","fontWeight","artistResultGrid","alignContent","flexFlow","SearchResults","searchResults","setSearchResults","React","loading","setLoading","useEffect","baseUrl","appId","searchValue","a","Axios","get","response","data","hasOwnProperty","console","error","refinedSearchTerm","includes","searchArtists","then","Skeleton","animation","map","record","handleClick","media","height","paddingTop","table","borderBottom","header","fontFamily","subtext","ArtistEvents","months","CardContent","align","alvariant","gutterBottom","Divider","venue","country","city","string","date","Date","getDate","getMonth","getFullYear","dateFormat","datetime","eventResultGrid","justifyContent","artistNameGrid","link","textDecoration","flexbasisunset","flexBasis","EventResults","location","useLocation","eventResults","setEventResults","artistName","getArtistEvents","state","to","style","upcoming_event_count","App","flexDirection","overflow","background","backgroundSize","alignSelf","DivContainer","landing","borderRadius","landingResults","exact","path","children","Child","Child2","artist","useParams","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e1da143d.chunk.js","sourcesContent":["//Handles user input and triggers search function\r\n// calls the url /results/searchTerm\r\n\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"flex-start\",\r\n        width: \"fill\",\r\n    },\r\n    paper: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"left\",\r\n        width: \"fill\",\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n    },\r\n    textField: {\r\n        margin: theme.spacing(1),\r\n        width: \"fill\",\r\n    },\r\n    //========================== how to get border color on focus to change??\r\n    input: {\r\n        outlineColor: \"#000000\",\r\n        color: \"secondary\",\r\n        borderColor: \"#80bdff\",\r\n        // '&$focused':{\r\n        //     borderColor: '#80bdff'\r\n        // }\r\n    },\r\n    grid: {\r\n        //paddingLeft: theme.spacing(12),\r\n    },\r\n}));\r\n\r\nexport default function SearchBar(props) {\r\n    let history = useHistory();\r\n\r\n    const classes = useStyles();\r\n    const [searchTerm, setSearchTerm] = useState(props.searchTerm); //props.artistName\r\n    const [userInput, setUserInput] = useState();\r\n    // const [showResults, setShowResults] = useState();\r\n\r\n    function handleChange(e) {\r\n        // e.preventDefault();\r\n        setUserInput(e.target.value);\r\n        let input = e.target.value.replace(/\\s/g, \"\");\r\n        setSearchTerm(input);\r\n        //setShowResults(true);\r\n    }\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            search(e);\r\n        }\r\n    };\r\n\r\n    const search = (e) => {\r\n        e.preventDefault();\r\n        // setShowResults(true);\r\n        if (searchTerm || searchTerm.length > 0) {\r\n            history.push(\"/results/\" + searchTerm);\r\n        }\r\n    };\r\n\r\n    const handleMouseDown = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <Grid container direction={\"column\"} className={classes.root}>\r\n            <Grid item xs={12} className={classes.grid}>\r\n                <FormControl className={classes.textField} variant='outlined'>\r\n                    <Paper className={classes.paper} elevation={2}>\r\n                        <OutlinedInput\r\n                            classes={{ focused: classes.input }}\r\n                            id='search-artist-input'\r\n                            type='text'\r\n                            placeholder='Search Artist Name'\r\n                            value={userInput}\r\n                            required={true}\r\n                            onChange={(e) => handleChange(e)}\r\n                            onKeyPress={(e) => handleKeyPress(e)}\r\n                            endAdornment={\r\n                                <InputAdornment position='end'>\r\n                                    <IconButton\r\n                                        aria-label='search icon'\r\n                                        onClick={search}\r\n                                        //onMouseDown={}\r\n                                        aria-autocomplete={\"both\"}\r\n                                        onMouseDown={handleMouseDown}\r\n                                        edge='end'\r\n                                    >\r\n                                        <SearchIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </Paper>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","//Displays the artist name and facebook url in a card\r\n// is passed one artist object as retrieved from API as a card\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { red } from \"@material-ui/core/colors\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 345,\r\n        margin: 10,\r\n        textAlign: \"left\",\r\n        padding: 0,\r\n        cursor: \"pointer\",\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    text: {\r\n        fontSize: 12,\r\n    },\r\n}));\r\n\r\nexport default function ArtistDetails(props) {\r\n    // console.log(\"Artist Details\", props.results);\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar\r\n                        aria-label='picture'\r\n                        className={classes.avatar}\r\n                        src={props.results.image_url}\r\n                    >\r\n                        {/*{props.results.name?'':props.results.name.charAt(0)}*/}\r\n                    </Avatar>\r\n                }\r\n                title={props.results.name}\r\n                subheader={\r\n                    <Typography\r\n                        className={classes.text}\r\n                        color={\"textSecondary\"}\r\n                        noWrap={false}\r\n                    >\r\n                        {props.results.facebook_page_url}\r\n                    </Typography>\r\n                }\r\n            />\r\n        </Card>\r\n    );\r\n}\r\n","//Fetches and displays the artists matching the searchTerm\r\n//is given searchTerm as props\r\n// URL /results/searchTerm\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport ArtistDetails from \"./ArtistDetails\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Axios from \"axios\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        margin: 10,\r\n        textAlign: \"left\",\r\n        padding: 10,\r\n        fontWeight: 400,\r\n        color: \"#ffffff\",\r\n    },\r\n    artistResultGrid: {\r\n        alignContent: \"flex-start\",\r\n        alignItems: \"flex-start\",\r\n        flexFlow: \"row wrap\",\r\n    },\r\n    root: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"left\",\r\n        width: \"fill\",\r\n    },\r\n}));\r\n\r\nexport default function SearchResults(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n\r\n    // console.log('searchterm',props);\r\n\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [loading, setLoading] = React.useState(true);\r\n\r\n    useEffect(() => {\r\n        const baseUrl = `https://rest.bandsintown.com`;\r\n        const appId = \"b2d0af8ea8bfb7288d2701b2d06e9eae\";\r\n\r\n        async function searchArtists(searchValue) {\r\n            try {\r\n                const response = await Axios.get(\r\n                    `${baseUrl}/artists/${searchValue}?app_id=${appId}`\r\n                );\r\n                const data = response.data;\r\n                // console.log(\"Data returned from API: \", data);\r\n                if (\r\n                    !data ||\r\n                    data.length === 0 ||\r\n                    data.hasOwnProperty(\"error\")\r\n                ) {\r\n                    //json object not valid\r\n                } else {\r\n                    searchResults.push(data);\r\n                    setSearchResults(searchResults);\r\n                }\r\n\r\n                // console.log('LATE Array of Search Results ', searchResults);\r\n\r\n                setLoading(false);\r\n                // return data;\r\n            } catch (error) {\r\n                // If an error occurred we log it to the console\r\n                console.error(\"Request Failed: \", error);\r\n            }\r\n        }\r\n\r\n        //data fetching whenever search term changes\r\n\r\n        let refinedSearchTerm = props.searchTerm;\r\n        if (refinedSearchTerm.includes(\" \")) {\r\n            refinedSearchTerm = refinedSearchTerm.replace(/\\s/g, \"\");\r\n        }\r\n        if (!refinedSearchTerm || refinedSearchTerm.length === 0) {\r\n            //ask user for proper input\r\n            searchResults.length = 0;\r\n            setSearchResults([]);\r\n            // console.log('empty input')\r\n        } else {\r\n            searchResults.length = 0;\r\n            setSearchResults([]);\r\n            searchArtists(refinedSearchTerm).then();\r\n        }\r\n    }, [props.searchTerm]);\r\n\r\n    function handleClick(e, record) {\r\n        e.preventDefault();\r\n        // console.log('onClick called', record);\r\n\r\n        history.push(\"/results/\" + props.searchTerm + \"/events\", record);\r\n    }\r\n\r\n    return loading ? (\r\n        <div className={classes.root}>\r\n            <Skeleton animation='wave' variant='text' />\r\n            <Skeleton animation='wave' variant='rect' />\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <Grid\r\n                className={classes.artistResultGrid}\r\n                container\r\n                direction='row'\r\n                alignItems='flex-start'\r\n            >\r\n                <Grid className={classes.artistResultGrid} item xs={12}>\r\n                    <Typography\r\n                        color={\"textSecondary\"}\r\n                        className={classes.text}\r\n                    >\r\n                        {/*make this depend on input*/}\r\n                        {searchResults.length} result(s) found for \"\r\n                        {props.searchTerm}\"\r\n                    </Typography>\r\n                </Grid>\r\n                {searchResults.map((record) => (\r\n                    <Grid\r\n                        item\r\n                        key={record.name}\r\n                        xs\r\n                        onClick={(e) => handleClick(e, record)}\r\n                    >\r\n                        <ArtistDetails key={record.id} results={record} />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n","//displays one event in a card, with country, date, city and venue\r\n//is passed one event as props\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\nimport \"fontsource-roboto\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: 300,\r\n        margin:5,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: \"56.25%\", // 16:9\r\n    },\r\n    table: {\r\n        borderBottom: \"none\",\r\n    },\r\n    header: {\r\n        fontFamily: \"Roboto\",\r\n        textAlign: \"left\",\r\n        fontSize: 13,\r\n    },\r\n    text: {\r\n        fontFamily: \"Roboto\",\r\n        textAlign: \"left\",\r\n        fontSize: 13,\r\n        fontWeight: \"bold\",\r\n        paddingTop: 8,\r\n    },\r\n    subtext: {\r\n        fontFamily: \"Roboto\",\r\n        textAlign: \"left\",\r\n        fontSize: 12,\r\n    },\r\n}));\r\n\r\nexport default function ArtistEvents(props) {\r\n    // console.log('Artist Event Details: ', props);\r\n    const classes = useStyles();\r\n\r\n    const months = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec'\r\n    ]\r\n\r\n    function dateFormat(string) {\r\n        //2020-10-07T19:00:00\r\n        const date = new Date(string);\r\n        return date.getDate() + \" \" + months[date.getMonth()] + \", \" + date.getFullYear();\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography className={classes.header} align={\"left\"} alvariant=\"overline\" gutterBottom>\r\n                    EVENT DETAILS\r\n                </Typography>\r\n                <Divider variant=\"middle\"/>\r\n                <Grid container direction=\"column\" alignItems=\"flex-start\">\r\n                    <Grid container direction=\"row\">\r\n                        <Grid item xs={6}>\r\n                            <Typography className={classes.text}>Country</Typography>\r\n                            <Typography noWrap={true} className={classes.subtext}\r\n                                        color={\"textSecondary\"}>{props.event.venue.country}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography className={classes.text}>City</Typography>\r\n                            <Typography noWrap={true} className={classes.subtext}\r\n                                        color={\"textSecondary\"}>{props.event.venue.city}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container direction=\"row\">\r\n                        <Grid item xs={6}>\r\n                            <Typography  className={classes.text}>Venue</Typography>\r\n                            <Typography noWrap={false} className={classes.subtext}\r\n                                        color={\"textSecondary\"}>{props.event.venue.name}</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Typography className={classes.text}>Date</Typography>\r\n                            <Typography noWrap={true} className={classes.subtext}\r\n                                        color={\"textSecondary\"}>{dateFormat(props.event.datetime)}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n","//Fetches and displays all the events of a particular artist\r\n//Is passed the artist object as props\r\n//URL: /results/artistName/events/ page\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport ArrowBackIosOutlinedIcon from \"@material-ui/icons/ArrowBackIosOutlined\";\r\nimport ArtistDetails from \"./ArtistDetails\";\r\nimport Axios from \"axios\";\r\nimport ArtistEvents from \"./ArtistEvents\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        margin: 10,\r\n        padding: 10,\r\n        fontSize: 15,\r\n        color: \"#ffffff\",\r\n    },\r\n    eventResultGrid: {\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"stretch\",\r\n    },\r\n    artistNameGrid: {\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"stretch\",\r\n        flexFlow: \"row wrap\",\r\n    },\r\n    link: {\r\n        fontWeight: 700,\r\n        textDecoration: \"none\",\r\n        color: \"#ffffff\",\r\n    },\r\n    flexbasisunset: {\r\n        flexBasis: \"auto\",\r\n    },\r\n}));\r\n\r\nexport default function EventResults(props) {\r\n    const location = useLocation();\r\n    // console.log('event results location', location.state);\r\n    // console.log('event results artist', props.artist);\r\n    const classes = useStyles();\r\n\r\n    // console.log('Event Artist Name', location.state.name);\r\n\r\n    const [eventResults, setEventResults] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const baseUrl = `https://rest.bandsintown.com`;\r\n        const appId = \"b2d0af8ea8bfb7288d2701b2d06e9eae\";\r\n\r\n        async function getArtistEvents(artistName) {\r\n            try {\r\n                const response = await Axios.get(\r\n                    `${baseUrl}/artists/${artistName}/events?app_id=${appId}&date=upcoming`\r\n                );\r\n                const data = response.data;\r\n                // console.log(\"Data returned from Events API: \", data);\r\n                // eventResults.push(data);\r\n                setEventResults(data);\r\n                // console.log('Array of Search Results ', eventResults);\r\n\r\n                // return data;\r\n            } catch (error) {\r\n                // If an error occurred we log it to the console\r\n                console.error(\"Request Failed: \", error);\r\n            }\r\n        }\r\n\r\n        //data fetching whenever searchterm changes\r\n        getArtistEvents(location.state.name);\r\n    }, [location.state]);\r\n\r\n    return (\r\n        <>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                alignContent='flex-start'\r\n                alignItems='flex-start'\r\n                className={classes.artistNameGrid}\r\n                direction='column'\r\n                alignItems='flex-start'\r\n            >\r\n                <Grid item xs={3} className={classes.flexbasisunset}>\r\n                    <Typography className={classes.text}>\r\n                        <Link\r\n                            to={`/results/${location.state.name}`}\r\n                            className={classes.link}\r\n                        >\r\n                            <ArrowBackIosOutlinedIcon\r\n                                style={{ fontSize: 10, margin: 0 }}\r\n                            ></ArrowBackIosOutlinedIcon>\r\n                            Back to Results\r\n                        </Link>\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <ArtistDetails results={location.state}></ArtistDetails>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Typography\r\n                        className={classes.text}\r\n                        color={\"textSecondary\"}\r\n                        align={\"left\"}\r\n                    >\r\n                        {location.state.upcoming_event_count} upcoming event(s)\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container className={classes.eventResultGrid} direction='row'>\r\n                {eventResults.map((record) => (\r\n                    <Grid item xs key={record.id}>\r\n                        <ArtistEvents event={record}></ArtistEvents>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport SearchBar from \"./components/SearchBar.js\";\r\nimport SearchResults from \"./components/SearchResults\";\r\nimport EventResults from \"./components/EventResults\";\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n    //Link,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    App: {\r\n        textAlign: \"center\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"100vh\",\r\n        // paddingLeft: \"auto\",\r\n        // paddingRight: \"auto\",\r\n        overflow: \"auto\",\r\n        background: \"url(https://i.imgur.com/l3ogBgn.jpeg)\",\r\n        backgroundSize: \"cover\",\r\n    },\r\n    SearchBar: {\r\n        // margin: \"0 50%\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        alignSelf: \"center\",\r\n        width: \"100%\",\r\n    },\r\n    DivContainer: {\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        alignContent: \"center\",\r\n        flexDirection: \"column\",\r\n        padding: theme.spacing(2),\r\n    },\r\n    landing: {\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"#761d30d4\",\r\n        padding: theme.spacing(12),\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        alignContent: \"center\",\r\n        flexDirection: \"column\",\r\n    },\r\n    landingResults: {\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"#761d30d4\",\r\n        padding: theme.spacing(12),\r\n        justifyContent: \"center\",\r\n        alignItems: \"flex-start\",\r\n        width: \"unset\",\r\n        overflow: \"inherit\",\r\n    },\r\n    text: {\r\n        fontWeight: \"800\",\r\n        color: \"#ffffff\",\r\n        fontFamily: \"inherit\",\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.App}>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path='/'>\r\n                        <div className={classes.landing}>\r\n                            <div className={classes.DivContainer}>\r\n                                <Typography\r\n                                    variant={\"h4\"}\r\n                                    className={classes.text}\r\n                                >\r\n                                    Enter your favourite artist's name\r\n                                </Typography>\r\n                            </div>\r\n                            <div className={classes.DivContainer}>\r\n                                <SearchBar\r\n                                    className={classes.SearchBar}\r\n                                    searchTerm={\"\"}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </Route>\r\n                    <Route exact path='/artisthub'>\r\n                        <Redirect to='/' />\r\n                    </Route>\r\n                    <Route exact path='/results/:artist' children={<Child />} />\r\n                    <Route\r\n                        exact\r\n                        path={\"/results/:artist/events\"}\r\n                        children={<Child2 />}\r\n                    />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n\r\n    function Child() {\r\n        // We can use the `useParams` hook here to access\r\n        // the dynamic pieces of the URL.\r\n        let { artist } = useParams();\r\n        return (\r\n            <Grid container className={classes.landingResults}>\r\n                <Grid item xs={8}>\r\n                    <SearchBar searchTerm={artist} />\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <SearchResults searchTerm={artist} />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    function Child2() {\r\n        let artist = useParams();\r\n        return (\r\n            <Grid\r\n                container\r\n                className={classes.landingResults}\r\n                direction='row'\r\n                alignItems='flex-start'\r\n            >\r\n                <EventResults artist={artist} />\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}